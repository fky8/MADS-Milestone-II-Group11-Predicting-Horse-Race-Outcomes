import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.metrics import (accuracy_score,precision_score,recall_score,mean_absolute_error)
import matplotlib.pyplot as plt

df_data = pd.read_csv('./data/ml_dataset_2019_2025_20250521_480_train_60_test.csv')
df_data = df_data[df_data['J_Emb_0'].notna()]

df_data['top_three'] = df_data['Placing'].apply(lambda x: 1 if x <= 3 else 0)

keep_cols = [
    'Date', 
    'RaceNumber', 
    'Horse',
    'Placing',
    'top_three',
    'Dr.', 
    'Act. Wt.',
    'Declar. Horse Wt.',
    'DistanceMeter'
]

df_encoded = df_data[keep_cols]

df_train = df_encoded[df_encoded['Date'] < '2025-01-01'].copy()
df_test = df_encoded[df_encoded['Date'] >= '2025-01-01'].copy()

X_train = df_train.drop(columns=['top_three', 'Placing', 'Date', 'RaceNumber', 'Horse'], errors='ignore')
X_test = df_test.drop(columns=['top_three', 'Placing', 'Date', 'RaceNumber', 'Horse'], errors='ignore')
y_train = df_train['top_three']
y_test = df_test['top_three']

imputer = SimpleImputer(strategy='mean')
X_train_imputed = imputer.fit_transform(X_train)
X_test_imputed = imputer.transform(X_test)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train_imputed)
X_test_scaled = scaler.transform(X_test_imputed)

model = LogisticRegression(max_iter=1000, class_weight='balanced')
model.fit(X_train_scaled, y_train)

y_probs = model.predict_proba(X_test_scaled)[:, 1]

preds = (y_probs > 0.5).astype(int)

mae = mean_absolute_error(y_test, preds)
accuracy = accuracy_score(y_test, preds)
precision = precision_score(y_test, preds, zero_division=0)
recall = recall_score(y_test, preds, zero_division=0)

print("\nLogistic Regression Baseline Model:")
print(f"mean_absolute_error: {mae:.2f}")
print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")